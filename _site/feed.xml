<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://jhong92-pro.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jhong92-pro.github.io/" rel="alternate" type="text/html" /><updated>2021-10-31T17:20:28+09:00</updated><id>https://jhong92-pro.github.io/feed.xml</id><title type="html">Site Title</title><subtitle>An amazing website.</subtitle><author><name>익명</name></author><entry><title type="html">Chapter3 Transport Layer</title><link href="https://jhong92-pro.github.io/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/%EC%BB%B4%EB%84%A4_chapter3/" rel="alternate" type="text/html" title="Chapter3 Transport Layer" /><published>2021-10-19T00:00:00+09:00</published><updated>2021-10-19T00:00:00+09:00</updated><id>https://jhong92-pro.github.io/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/%EC%BB%B4%EB%84%A4_chapter3</id><content type="html" xml:base="https://jhong92-pro.github.io/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/%EC%BB%B4%EB%84%A4_chapter3/">&lt;h2 id=&quot;transport-vs-network-layer&quot;&gt;Transport vs. network layer&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Network layer : 호스트끼리 통신&lt;/li&gt;
  &lt;li&gt;Transport layer : 호스트의 프로세스끼리 통신&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiplexing-demultiplexing&quot;&gt;Multiplexing, Demultiplexing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Multiplexings&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Multiplexing : 여러신호를 변환하여 하나의 매체에 담아 보냄&lt;/li&gt;
  &lt;li&gt;데이터 송신 시 ‘여러’ 소켓의 데이터가 header를 달고 ‘하나의’ transport layer로 보내짐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demultiplexing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Demultiplexing : 매체에 담긴 신호를 원래의 신호로 복원&lt;/li&gt;
  &lt;li&gt;데이터 수신 시 transport layer로 부터 받은 데이터 여러개를 알맞은 소켓으로 보냄
TCP는 호스트의 application마다 socket이 있기 때문에
 source IP address
 source port number
 dest IP address
 dest port number
위 네 개의 정보를 보고 알맞은 소켓으로 데이터 전달(UDP는 source 정보 필요 없음)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;udp&quot;&gt;UDP&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;최소기능&lt;/li&gt;
  &lt;li&gt;best effort : 곧이 곧대로 데이터 전달만 해줌&lt;/li&gt;
  &lt;li&gt;connectionless : 데이터끼리 독립적임, 순서없음&lt;/li&gt;
  &lt;li&gt;사용 예
    &lt;ul&gt;
      &lt;li&gt;스트리밍 : 손실 나도 ok, 속도 보장 해야함&lt;/li&gt;
      &lt;li&gt;DNS : 한번 쿼리보내고 받으면 끝나기 때문에 connection 안맺어도 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;reliable transfer 하려면 application 단에서 순서, 에러체크 해야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;UDP checksum&lt;/strong&gt;
오류 검출&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;헤더의 모든 값을 16비트 단위로 모두 더함&lt;/li&gt;
  &lt;li&gt;add carry bit&lt;/li&gt;
  &lt;li&gt;1의 보수(bit 반전)
오류 검출만 하고 이후로 하는 건 없다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reliable-data-transfer이-되기-위한-조건&quot;&gt;reliable data transfer이 되기 위한 조건&lt;/h2&gt;
&lt;p&gt;reliable data transfer : 데이터가 오류없이 전송되는 것&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Checksum : 오류발생 여부를 알려줘야 함&lt;/li&gt;
  &lt;li&gt;Acknowledgement : receiver가 sender에게 패킷을 받았다고 알려줌&lt;/li&gt;
  &lt;li&gt;Negative Acknowledgement : receiver가 sender에게 어떤 패킷이 오류인지 알림&lt;/li&gt;
  &lt;li&gt;Timer : 일정 시간 후 ack 또는 n-ack 이 오지 않으면 network drop 되었다고 판단, 재전송
같은 sequence number data 데이터 받으면&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(=재전송으로 인해 receiver가 동일한 데이터 받으면)&lt;/code&gt; app에서 버린다&lt;/li&gt;
  &lt;li&gt;Pipeline : 여러개의 데이터를 전송할 수 있음&lt;/li&gt;
  &lt;li&gt;Window : pipeline에서 ack를 받지 않고 최대 전달 할 수 있는 패킷의 수&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tcp&quot;&gt;TCP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;특징&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;point to point : one sender, one receiver&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(!=multicasting)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;byte stream : 데이터의 경계 없음, msg buffer에 메시지 담아 처리&lt;/li&gt;
  &lt;li&gt;pipelined&lt;/li&gt;
  &lt;li&gt;duplex : 동일 회선으로 쌍방 소통 가능&lt;/li&gt;
  &lt;li&gt;connection-oriented&lt;/li&gt;
  &lt;li&gt;flow control, congestion control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TCP Segment Header&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;source port #, dest port #&lt;/li&gt;
  &lt;li&gt;sequence number&lt;/li&gt;
  &lt;li&gt;acknowledgement number : 이 값이 N 이면 N-1까진 잘 받았고 N번째 값 받을 차례라는 뜻&lt;/li&gt;
  &lt;li&gt;flg
URG : urgent data(잘 안씀)
ACK : ack 정보가 있다는 뜻
PSH : push data now
RST, SYN, FIN : connection setup 때 씀&lt;/li&gt;
  &lt;li&gt;receive window : buffer size 에 의해 결정, 이 값이 M 이라면 N~M 번째 데이터는 stream으로 계속 보내도 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:TCP_Seqment_ba%C5%9Fl%C4%B1%C4%9F%C4%B1.png#file&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/d/de/TCP_Seqment_ba%C5%9Fl%C4%B1%C4%9F%C4%B1.png&quot; alt=&quot;TcpSegment&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>익명</name></author><category term="컴퓨터 네트워크" /><category term="복습" /><summary type="html">Transport vs. network layer Network layer : 호스트끼리 통신 Transport layer : 호스트의 프로세스끼리 통신</summary></entry><entry><title type="html">Chapter2 application layer</title><link href="https://jhong92-pro.github.io/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/%EC%BB%B4%EB%84%A4_chapter2/" rel="alternate" type="text/html" title="Chapter2 application layer" /><published>2021-10-04T00:00:00+09:00</published><updated>2021-10-04T00:00:00+09:00</updated><id>https://jhong92-pro.github.io/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/%EC%BB%B4%EB%84%A4_chapter2</id><content type="html" xml:base="https://jhong92-pro.github.io/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/%EC%BB%B4%EB%84%A4_chapter2/">&lt;h2 id=&quot;server-client-architecture&quot;&gt;Server Client Architecture&lt;/h2&gt;
&lt;p&gt;서버&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;always-on host&lt;/li&gt;
  &lt;li&gt;IP 주소 고정&lt;/li&gt;
  &lt;li&gt;데이터 센터 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;필요시에만 연결&lt;/li&gt;
  &lt;li&gt;동적 IP 주소 가질 수 있음&lt;/li&gt;
  &lt;li&gt;클라이언트끼리 통신하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client-Server Computing의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 서버에서만 제공하기 때문에 서버만 유저의 authorization과 데이터 protection을 관리하면 된다&lt;/li&gt;
  &lt;li&gt;기능의 분리(서버는 데이터를 주기만 하고 클라이언트는 데이터를 받기만 한다)로 모든 노드가 독립적이고 확장과 유지 보수가 쉽다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client-Server Computing의 단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;traffic이 몰릴 수 있다(반면 P2P는 self scability)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;p2p&quot;&gt;P2P&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크에 있는 모든 사용자가 자원을 요청할 수도, 제공할 수도 있음&lt;/li&gt;
  &lt;li&gt;always-on server 없음&lt;/li&gt;
  &lt;li&gt;self scalability : peer가 늘어날 때 마다 데이터를 요청하는 node도 늘어나지만 데이터를 제공하는 node도 늘어난다 (service capability 증가)&lt;/li&gt;
  &lt;li&gt;peer는 간헐적으로 연결되어 있고 IP가 바뀌기 때문에 관리가 어려움&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-communicating&quot;&gt;Process communicating&lt;/h2&gt;
&lt;p&gt;프로세스 : 호스트가 실행중인 프로그램
같은 호스트 내 두 프로세스는 inter-process communication로 정보를 주고 받는다
다른 호스트의 두 프로세스는 message를 통해 정보를 주고 받는다&lt;/p&gt;

&lt;p&gt;client process : communication 시작하는 프로세스
server process : communication을 기다리는 프로세스&lt;/p&gt;

&lt;p&gt;P2P는 각 peer가 client process, server process 가진다&lt;/p&gt;

&lt;p&gt;프로세스는 socket을 통해 메세지를 주고 받는다&lt;/p&gt;

&lt;p&gt;IP Address : 네트워크 상에서 호스트를 식별가능 하게 함
port : 호스트내의 여러 프로세스를 식별가능하게 한다
통신은 프로세스끼리 하기 때문에 port번호가 반드시 필요하다&lt;/p&gt;

&lt;h2 id=&quot;application의-종류에-따라-요구되는-특성&quot;&gt;application의 종류에 따라 요구되는 특성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;data integrity : 파일 전송은 100 퍼센트 integrity 보장해야 하고 오디오는 조금 달라져도 괜찮다&lt;/li&gt;
  &lt;li&gt;timing(latency) : 게임, 전화는 delay가 있으면 안되고 파일 전송은 조금 늦어져도 큰 상관은 없다&lt;/li&gt;
  &lt;li&gt;throughput : 스트리밍은 버퍼가 없어야 한다&lt;/li&gt;
  &lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;latency : data transfer &amp;lt;-&amp;gt; received 사이의 왕복 또는 편도 시간
throughput : 단위시간 당 전송되는 데이터의 양&lt;/p&gt;

&lt;h2 id=&quot;internet-transport-protocols---tcp-udp&quot;&gt;Internet transport protocols - TCP, UDP&lt;/h2&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 보내기전에 연결을 위한 setup 필요하다&lt;/li&gt;
  &lt;li&gt;flow control : receiver에 버퍼 쌓이면 sender가 보내는 패킷의 양 조절&lt;/li&gt;
  &lt;li&gt;congestion control : 네트워크에 buffer 쌓이면 sender가 보내는 패킷의 양 조절&lt;/li&gt;
  &lt;li&gt;data integrity 보장&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UDP&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;노드끼리 연결 없이 데이터 전송 : overhead 줄어듬&lt;/li&gt;
  &lt;li&gt;data integrity 보장 안 함, application에서 data integrity 보장하면 굳이 transport 계층에서 data integrity 보장할 필요는 없다&lt;/li&gt;
  &lt;li&gt;flow control 없기 때문에 최소 frame 보장&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두 프로토콜 모두 보안은 application layer에서 수행&lt;/p&gt;

&lt;h2 id=&quot;웹과-http&quot;&gt;웹과 HTTP&lt;/h2&gt;
&lt;p&gt;웹페이지 구성 : base HTML + objects(image, audio 등등..)
각 object는 URL 주소로 나타낸다. (ex. https://www.itfind.or.kr/WZIN/jugidong/1888/file6111801471006205940-188802.pdf)&lt;/p&gt;

&lt;p&gt;HTTP(hypertext transfer protocol) : hypertext link를 통해 웹 페이지를 주고 받는 프로토콜
특징&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트의 TCP 연결요청으로 시작 (참고 : HTTP/3은 UDP를 쓴다)&lt;/li&gt;
  &lt;li&gt;서버가 TCP를 수락하면서 통신&lt;/li&gt;
  &lt;li&gt;브라우저와 웹 서버 간의 HTTP 메시지가 교환된다&lt;/li&gt;
  &lt;li&gt;stateless : 서버는 클라이언트가 이전에 요청했던 정보를 유지하지 않는다, 즉 같은 클라이언트의 요청이더라도 각 통신은 독립적이다&lt;/li&gt;
  &lt;li&gt;persistent HTTP(keep-alive) :
client가 각 base url 뿐만 아니라 각 object또한 http 요청으로 받아와야 한다.
한 페이지에 다수의 object가 있을 경우 각 object마다 새로 연결을 맺지 않고 기존에 맺었던 연결로 object를 가져온다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-request-message&quot;&gt;HTTP request message&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) status line
GET /index.html HTTP/1.1\r\n
2) header lines
Host: www-net.cs.umass.edu\r\n
User-Agent: Firefox/3.6.10\r\n
Accept: text/html,application/xhtml+xml\r\n
Accept-Language: en-us,en;q=0.5\r\n
Accept-Encoding: gzip,deflate\r\n
Accept-Charset: ISO-8859-1,utf-8;q=0.7\r\n
Keep-Alive: 115\r\n
Connection: keep-alive\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1) status line : method 종류 + url + http version&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;method는 데이터를 전송하는 방식을 규정한다
    &lt;ul&gt;
      &lt;li&gt;GET — For returning resources&lt;/li&gt;
      &lt;li&gt;POST — For creating a new resource&lt;/li&gt;
      &lt;li&gt;PUT — For updating a resource&lt;/li&gt;
      &lt;li&gt;PATCH — For updating a resource&lt;/li&gt;
      &lt;li&gt;DELETE — For deleting a resource&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;method는 주로 GET과 POST가 쓰인다&lt;br /&gt;
GET은 서버로 파라미터를 전달할 때 url에 값이 담긴다 &lt;br /&gt;
네이버에 http method라고 검색하면 주소창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query=http+method&lt;/code&gt;가 노출된다.&lt;br /&gt;
&lt;a href=&quot;https://search.naver.com/search.naver?where=nexearch&amp;amp;sm=top_hty&amp;amp;fbm=1&amp;amp;ie=utf8&amp;amp;query=http+method&quot;&gt;search.naver.com/search.naver?where=nexearch&amp;amp;sm=top_hty&amp;amp;fbm=1&amp;amp;ie=utf8&amp;amp;query=http+method&lt;/a&gt;&lt;br /&gt;
POST는 서버로 파라미터를 전달할 때 request body에 담긴다. 따라서 url 주소로 노출되지 않는다.&lt;/p&gt;

    &lt;p&gt;개발할 때 굳이 위의 규칙을 지키지 않아도 잘 작동하기는 한다.&lt;/p&gt;
    &lt;details&gt;
&lt;summary&gt;&lt;u&gt;왜 http method를 따라야 할까?&lt;/u&gt;&lt;/summary&gt;
&lt;div&gt;
        &lt;p&gt;&lt;a href=&quot;https://medium.com/@suhas_chatekar/why-you-should-use-the-recommended-http-methods-in-your-rest-apis-981359828bf7&quot;&gt;medium.com/@suhas_chatekar/why-you-should-use-the-recommended-http-methods-in-your-rest-apis-981359828bf7&lt;/a&gt;&lt;br /&gt;
idempotent operation란 operation에 의해 상태가 변하지 않음을 의미한다.&lt;br /&gt;
서버에서 이는 서버의 상태를 변화시키지 않는다는 것을 의미한다.&lt;br /&gt;
GET, PUT, DELETE로는 서버의 자원이 변하지 않고(않을 수 있고) POST, PATCH는 서버의 자원이 변한다. 자세한 건 지금은 넘어가자&lt;/p&gt;

        &lt;p&gt;클라이언트 입장에서 GET으로 같은 요청을 여러번 보내도(새로고침을 여러번해도) 서버의 자원을 받아오기만 하는 것이기 때문에 상관없다(ex. 네이버 검색결과)&lt;br /&gt;
클라이언트는 GET요청을 여러번 요청해도 서버에 영향이 없을 것이라고 생각한다.&lt;br /&gt;
하지만 주문 요청을 하는 POST요청을 여러번 보내는 것은 문제가 있을 수 있다.&lt;br /&gt;
POST요청 결과를 새로고침하면 다음과 같은 창이 나타난다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/postRefresh.jpg&quot; alt=&quot;postRefresh&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;또한, 동일한 GET요청을 보냈을 시 이전에 보냈던 요청과 같은 결과를 받을 것으로 기대할 수 있기 때문에 caching이 가능하다&lt;/p&gt;

        &lt;p&gt;아래는 내 생각이다. get으로 커피주문 시나리오를 보자&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/coffeeOrder.png&quot; alt=&quot;coffeeOrder&quot; /&gt;&lt;br /&gt;
GET으로 POST에서 할법한 요청을 처리했을 때 캐싱하면 안 될 요청을 캐싱할 수 있으므로 조심하자&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;
  &lt;/li&gt;
  &lt;li&gt;url 는 네트워크에서 자원이 어디있는 지 알려준다&lt;/li&gt;
  &lt;li&gt;http version : http 프로토콜 버전 정보
&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2145#section-2.3&quot;&gt;www.rfc-editor.org/rfc/rfc2145#section-2.3&lt;/a&gt;&lt;br /&gt;
자세히는 모르겠지만 이걸 보면 엄격하게 버전에 맞춰서 서버가 응답을 안해줘도 되는 것 같다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2) header lines : 부가적인 정보&lt;/strong&gt;
서버가 어떻게 response 해야할 지 알려준다&lt;/p&gt;

&lt;h2 id=&quot;http-request-message-1&quot;&gt;HTTP request message&lt;/h2&gt;
&lt;p&gt;강의에서 자세히 다루지 않아서 따로 적겠습니다&lt;/p&gt;

&lt;h2 id=&quot;쿠키&quot;&gt;쿠키&lt;/h2&gt;
&lt;p&gt;쿠키는 클라이언트의 로컬에 저장된 데이터이다.
HTTP 요청은 stateless, 즉 서버는 요청을 보낸 클라이언트가 이전 요청에서 로그인을 했는 지 안 했는 지 알 수 없다.&lt;br /&gt;
따라서, 서버에 요청 시 쿠키를 보내서 이전 요청에서 로그인 했다는 사실을 서버에게 알려준다.&lt;br /&gt;
&lt;img src=&quot;/assets/img/cookie.png&quot; alt=&quot;cookie&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;웹-캐시&quot;&gt;웹 캐시&lt;/h1&gt;
&lt;p&gt;웹 캐시 종류 : 브라우저 캐시, 프록시 웹 캐시&lt;br /&gt;
클라이언트가 서버로 요청을 보낼 때 프록시 서버를 경유하게 한다.&lt;/p&gt;

&lt;p&gt;프록시 서버&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트가 서버 대신 프록시 서버에 요청한다.&lt;/li&gt;
  &lt;li&gt;프록시 서버는 응답을 서버로부터 가져오고 해당 응답을 프록시 서버에 저장한다.&lt;/li&gt;
  &lt;li&gt;동일한 요청이 오면 서버를 거치지 않고 프록시서버에서 응답을 해준다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conditional Get&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;너무 오래된 응답페이지를 클라이언트에게 보내면 안된다.&lt;/li&gt;
  &lt;li&gt;신선도 검사 후 페이지의 최근 수정일을 서버에게 보낸다.&lt;/li&gt;
  &lt;li&gt;서버가 수정되었다면 프록시 서버에게 새로운 페이지를 보낸다.&lt;/li&gt;
  &lt;li&gt;헤더만 주고 받기 때문에 비용이 적다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;이메일&quot;&gt;이메일&lt;/h2&gt;
&lt;p&gt;이메일이 보내지는 과정&lt;br /&gt;
Computer(user agent) — mail server — internet — mail server — Computer(user agent)&lt;/p&gt;

&lt;p&gt;User Agent&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서버에 있는 메일을 불러오거나 메일을 쓸 수 있다&lt;/li&gt;
  &lt;li&gt;ex. OutLook, iPhone mail client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mail server&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;도메인 (@naver.com, @gmail.com) 별로 존재&lt;/li&gt;
  &lt;li&gt;mailbox : 저장된 이메일 저장, 사용자 별로 존재한다&lt;/li&gt;
  &lt;li&gt;message queue : 보낼 이메일 대기열&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SMTP&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트에서 메일서버로 통신할 때, 메일서버끼리 통신할 때 쓰임&lt;/li&gt;
  &lt;li&gt;TCP, PORT 25에서 통신&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;POP3, IMAP&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트가 메일서버의 메일 가져올 때 쓰임(HTTP도 쓰일 수 있다)&lt;/li&gt;
  &lt;li&gt;POP3는 메일을 받으면 해당 서버에서 메시지가 삭제됨&lt;/li&gt;
  &lt;li&gt;IMAP는 삭제 안됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;회사에서 여전히 이메일을 쓰는 이유&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;영구저장 : 카카오톡으로 이미지를 주고 받을 때를 생각해보면 유효기간이 있음&lt;/li&gt;
  &lt;li&gt;보안 : 뛰어난 보안으로 내가 의도한 사람에게만 메일을 보낼 수 있다&lt;/li&gt;
  &lt;li&gt;여러가지 검색해보았지만 위 두가지 이유 외에는 다른 메시지 앱도 해당하는 기능이었음(편리성, 신속성 등등)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dns&quot;&gt;DNS&lt;/h1&gt;
&lt;p&gt;www.naver.com 를 주소창에 검색하면 바로 네이버 서버로 접근 하는것이 아니다&lt;br /&gt;
네이버 서버에 접근하기 위해서는 네이버 서버의 IP 주소가 필요하다.&lt;br /&gt;
DNS는 도메인을 IP 주소로 변환해준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cmd 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nslookup www.naver.com&lt;/code&gt; 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Addresses에 있는 223.130.200.107, 223.130.195.200 로 네이버 서버에 접근한다.&lt;br /&gt;
실제로 검색된 IP주소를 복사하여 주소창에 붙여넣어도 네이버 페이지로 접속된다.&lt;br /&gt;
IP 주소를 사람이 직접 외우기 어렵기 때문에 DNS 서버를 쓴다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS 종류&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;도메인은 로컬 DNS가 3가지 종류의 DNS 서버를 순차적으로 접근하여 IP 주소가 검색한다.&lt;/li&gt;
  &lt;li&gt;root DNS server : 로컬 DNS가 DNS 서버에 접근할 때 가장 먼저 거치는 곳, .edu .org .kr 등의 TLD DNS 서버의 위치를 알려준다.&lt;/li&gt;
  &lt;li&gt;TLD DNS server : 각 기관(naver, daum)의 authoritative DNS server 의 위치를 알려준다.&lt;/li&gt;
  &lt;li&gt;authoritative DNS server : 기관이 관리하는 도메인의 주소를 알려준다. 네이버가 관리하는 도메인 예시 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mail.naver.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;section.blog.naver.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;여러개로 DNS를 쪼개면 단일 DNS 서버가 존재하는 것 보다 트래픽이 낮다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;iterated vs recursive&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;iterated query : 각 DNS는 로컬 DNS에게 DNS 서버의 위치만 알려준다. 예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;을 검색할 때 root DNS 서버가 .com을 담당하는 TLD DNS server의 위치를 로컬 DNS 서버에게 알려준다. 로컬 DNS 서버는 TLD DNS server에 다시 물어봐야 한다.&lt;/li&gt;
  &lt;li&gt;recursive query : 각 DNS server는 하위계층(계층은 root, TLD, authoritative 순)의 DNS 서버에게 도메인 주소를 직접 물어본다. 따라서 로컬 DNS가 root DNS 서버에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;을 검색하면 해당 IP를 직접 반환해준다.&lt;/li&gt;
  &lt;li&gt;recursive query는 상위 DNS에서 load가 크다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DNS records&lt;/strong&gt;
RR format: (name, value, type, ttl)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;type=A : name=hostname, value=IP address ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com, XX.XXX.XXX.XXX, A, 1100&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;type=NS : name=domian, value=authoritative name server&lt;/li&gt;
  &lt;li&gt;type=CNAME : name=alias, value = canonical name, 우리가 www.ibm.com 이라고 하는 것은 별칭일 수도 있다. servereast.backup2.ibm.com가 실제이름이고 실제이름이 복잡할 때 쓸 수 있다.&lt;/li&gt;
  &lt;li&gt;type=MX : name=domain, value=mail server&lt;/li&gt;
  &lt;li&gt;ttl은 캐싱의 신선도를 체크할 때 쓰인다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;socket&quot;&gt;Socket&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 송수신 시 생성되는 소프트웨어.&lt;/li&gt;
  &lt;li&gt;애플리케이션끼리 통신할 때 소켓의 routine을 따라야 통신 가능하다.&lt;/li&gt;
  &lt;li&gt;통신하는 방법에 따라 소켓의 차이가 있다.(TCP/UDP)
TCP : 클라이언트의 통신 요청 마다 소켓 하나씩 생성
UDP : 소켓 하나&lt;/li&gt;
&lt;/ul&gt;</content><author><name>익명</name></author><category term="컴퓨터 네트워크" /><category term="복습" /><summary type="html">Server Client Architecture 서버 always-on host IP 주소 고정 데이터 센터 존재</summary></entry><entry><title type="html">MVC의 한계와 스프링 기본 구조</title><link href="https://jhong92-pro.github.io/spring/MVC%EC%9D%98-%ED%95%9C%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0/" rel="alternate" type="text/html" title="MVC의 한계와 스프링 기본 구조" /><published>2021-08-25T00:00:00+09:00</published><updated>2021-08-25T00:00:00+09:00</updated><id>https://jhong92-pro.github.io/spring/MVC%EC%9D%98%20%ED%95%9C%EA%B3%84%EC%99%80%20%EC%8A%A4%ED%94%84%EB%A7%81%20%EA%B8%B0%EB%B3%B8%20%EA%B5%AC%EC%A1%B0</id><content type="html" xml:base="https://jhong92-pro.github.io/spring/MVC%EC%9D%98-%ED%95%9C%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0/">&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1&quot;&gt;스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기존-서블릿jsp-의-한계&quot;&gt;기존 서블릿+JSP 의 한계&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;		
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// logic&lt;/span&gt;
  
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/shopping/product.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;중복 소스
    &lt;ul&gt;
      &lt;li&gt;HttpServletRequest request, HttpServletResponse response&lt;/li&gt;
      &lt;li&gt;CharacterEncoding&lt;/li&gt;
      &lt;li&gt;뷰 호출함수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ViewPath 관리
    &lt;ul&gt;
      &lt;li&gt;suffix, prefix 가 바뀌면 모든 소스에서 다 바꿔야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공통처리를 못한다&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;spring-mvc-기본-구조&quot;&gt;Spring MVC 기본 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/springArchitecture.jpg&quot; alt=&quot;SpringArchitecture&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/shopping/add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// logic&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/item/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/shopping/add&lt;/code&gt;를 호출하면…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;url에 상관없이 DispatcherServlet 호출&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/shopping/add&lt;/code&gt; 와 매핑된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public String save(@ModelAttribute Item item)&lt;/code&gt; 조회&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;조회된 Handler 실행할 수 있는 어댑터 조회
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public String save(@PathVariable long itemId, Model model)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public String save(@RequestParam String item)&lt;/code&gt; 등 편의에 따라 다양한 parameter를 전달할 수 있다. 파라미터 종류에 따라 Controller를 적절히 실행할 수 있도록 HandlerAdapter에서 처리해준다.&lt;/li&gt;
      &lt;li&gt;Handler를 110V 또는 220V 콘센트, HandlerAdapter를 변압기 또는 어댑터 정도로 생각하면 될 것 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조회된 어댑터 실행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;작성한 Handler의 로직 실행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HandlerAdapter 에 의해 반환된 ViewPath(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/item/list&lt;/code&gt;)를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/WEB-INF/item/list.jsp&lt;/code&gt;로 변환하고 jsp파일을 html로 변환&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;View 를 클라이언트에 전달&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;** 2,3번과정이 개인적으로 이해 안된다.&lt;br /&gt;
1) 강의에서는 url에 따른 handlerMapping을 직접 했다.&lt;br /&gt;
2) 또한 상속을 직접 했다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initHandlerAdapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handlerAdapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ControllerV3HandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ControllerV3를 지원하는 Adapter&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handlerAdapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ControllerV4HandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ControllerV4를 지원하는 Adapter&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;handlerMappingMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/front-controller/v5/v3/members/new-form&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberFormControllerV3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handlerMappingMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/front-controller/v5/v3/members/save&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberSaveControllerV3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handlerMappingMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/front-controller/v5/v3/members&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberListControllerV3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handlerMappingMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/front-controller/v5/v4/members/new-form&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberFormControllerV4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handlerMappingMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/front-controller/v5/v4/members/save&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberSaveControllerV4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handlerMappingMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/front-controller/v5/v4/members&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberListControllerV4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberFormControllerV3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ControllerV3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ModelView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new-form&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 실제로 스프링에서는 두 가지 과정을 알아서 해준다.&lt;br /&gt;
아마 Method의 input parameter, return type 등을 보고 하지 않을까 생각된다.&lt;/p&gt;

&lt;h2 id=&quot;추가로-찾아본-내용&quot;&gt;추가로 찾아본 내용&lt;/h2&gt;
&lt;p&gt;Handler vs Controller&lt;br /&gt;
&lt;a href=&quot;https://www.quora.com/What-is-an-handler-in-programming&quot;&gt;www.quora.com/What-is-an-handler-in-programming&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://web.csulb.edu/~pnguyen/cecs475/pdf/Web%20API%20Controller.pdf&quot;&gt;web.csulb.edu/~pnguyen/cecs475/pdf/Web%20API%20Controller.pdf&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/30165625/whats-difference-between-controller-and-handler-in-spring-mvc&quot;&gt;https://stackoverflow.com/questions/30165625/whats-difference-between-controller-and-handler-in-spring-mvc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handler : 이벤트 발생시 호출 되는 코드&lt;br /&gt;
Controller : 이벤트 발생시(=HttpRequest) 호출 되는 코드(=작성한 코드 처리 후 response 반환)&lt;/p&gt;

&lt;p&gt;Handler, Controller 모두 Spring에서만 한정적으로 쓰이는 단어가 아니다.&lt;br /&gt;
Spring이 HttpRequest만 처리하는 게 아니기 때문에(ex. MessageHandler) handler라는 범용적인 단어를 쓴 것 같다.&lt;/p&gt;</content><author><name>익명</name></author><category term="Spring" /><category term="복습" /><summary type="html">스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</summary></entry><entry><title type="html">스프링 기본 기능</title><link href="https://jhong92-pro.github.io/spring/%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B8%B0%EB%B3%B8-%EA%B8%B0%EB%8A%A5/" rel="alternate" type="text/html" title="스프링 기본 기능" /><published>2021-08-25T00:00:00+09:00</published><updated>2021-08-25T00:00:00+09:00</updated><id>https://jhong92-pro.github.io/spring/%EC%8A%A4%ED%94%84%EB%A7%81%20%EA%B8%B0%EB%B3%B8%20%EA%B8%B0%EB%8A%A5</id><content type="html" xml:base="https://jhong92-pro.github.io/spring/%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B8%B0%EB%B3%B8-%EA%B8%B0%EB%8A%A5/">&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1&quot;&gt;스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;welcome-page&quot;&gt;Welcome Page&lt;/h2&gt;
&lt;p&gt;welcome page 경로 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/resource/static/index.html&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;url-매핑&quot;&gt;URL 매핑&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlMappingController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/view/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Controller&lt;/code&gt; : Controller의 역할을 수행하는 Bean으로 등록&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt; : 요청 URL을 어떤 메소드가 처리할 지 결정&lt;br /&gt;
해당 코드에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/basic&lt;/code&gt; 을 받으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basic()&lt;/code&gt;이 처리하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/view/basic&lt;/code&gt;이 View로 반환된다&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/mapping/v1/very/long/path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlMappingController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/view/blank&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/view/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 경우는
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mapping/v1/very/long/path&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blank()&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mapping/v1/very/long/path/basic&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basic()&lt;/code&gt; 메서드가 호출된다&lt;/p&gt;

&lt;h2 id=&quot;restcontrollerresponsebody&quot;&gt;@RestController(@ResponseBody)&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlMappingController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;	
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/view/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlMappingController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/view/basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt; annotation을 쓰면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;/view/basic&quot;&lt;/code&gt; 경로의 view 대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;/view/basic&quot;&lt;/code&gt;라는 String이 반환된다.(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt;는 Class에도 쓸 수 있다)
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RestController&lt;/code&gt; = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Controller&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt; 이다&lt;/p&gt;

&lt;h2 id=&quot;http-메서드&quot;&gt;Http 메서드&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method=RequestMethod.GET&lt;/code&gt; 를 선언하면 Get 메서드만 처리하고 다른 메서드는 접근 제한된다. 짧게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GetMapping&lt;/code&gt;으로 쓸 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;requestbody&quot;&gt;RequestBody&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;c1&quot;&gt;// 방법1&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-body&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestBodyStringV4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;requestBody = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	

	&lt;span class=&quot;c1&quot;&gt;// 방법2 - JSON 데이터 처리&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-body-json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestBodyJsonV3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname={}, rank={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;		
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 방법으로 requestBody에 있는 값을 String으로 가져올 수 있다
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;를 없애면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;로 인식되어 필수로 넣어야 한다.(RequestParam의 방법7 참고)
방법2에서 파라미터로 자바객체가 들어오면 JsonConverter로 동작, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content-type&lt;/code&gt;도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/json&lt;/code&gt; 이어야 한다.&lt;/p&gt;

&lt;h2 id=&quot;requestparam&quot;&gt;RequestParam&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/request-param-(version)?nickname=myNickname&amp;amp;rank=3&lt;/code&gt;&lt;br /&gt;
위와 같은 요청을 보내면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt; 으로 query parameter를 처리할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;c1&quot;&gt;// 방법1&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-param-v1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParamV1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rank&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//방법2 - @RequestParam의 value 와 변수명이 같다면 @RequestParam를 생략해도 된다&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-param-v2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParamV2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//방법3&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-param-v3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParamV3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//방법4 - required 따로 선언하지 않으면 true, 해당 파라미터가이 queryparameter에 존재하지 않으면 Bad Request 오류&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-param-v4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParamV4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	
	
	&lt;span class=&quot;c1&quot;&gt;//방법5 - 디폴트값&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-param-default&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParamDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;guest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//default 있으면 required 필요 없음.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//방법6 - map으로 받기&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/request-param-map&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParamMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rank&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//방법7 - 자바 객체에 자동으로 set &lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/model-attribute-v1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modelAttributeV1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/**
		 * MyData 클래스
		 * 변수 : String nickname, int rank
		 * 각 변수에 대해 getter, setter 존재
		 */&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//	MyData data = new MyData();&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	data.setRank(rank);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	data.setNickname(nickname); 여기까지 자동으로 세팅&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	
	
	&lt;span class=&quot;c1&quot;&gt;//방법8 - 생성한 객체에 자동으로 set &lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/model-attribute-v2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modelAttributeV2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;		

	&lt;span class=&quot;c1&quot;&gt;//기타(PathVariable) : url 경로의 값을 읽는다&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path-variable/{nickName}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// http://localhost:8080/path-variable/nickname&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mappingPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// public String mappingPath(@PathVariable String nickName) { // 이렇게 url과 변수명 맞춰도 된다&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mappingPath nickName = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//기타(PathVariable) - @PathVariable의 value와 변수명이 같다면 생략해도 된다&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path-variable/{nickName}/{rank}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// http://localhost:8080/path-variable/nickname/1&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mappingPath2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// public String mappingPath(@PathVariable String nickName) { // 이렇게 url과 변수명 맞춰도 된다&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mappingPath nickName = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//기타(PathVariable) - 3&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path-variable/{nickName}/{rank}/3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// http://localhost:8080/path-variable/nickname/1/3&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mappingPath3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathVarsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// public String mappingPath(@PathVariable String nickName) { // 이렇게 url과 변수명 맞춰도 된다&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mappingPath nickName = {}, rank = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathVarsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathVarsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rank&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 Body에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-www-form-urlencoded&lt;/code&gt;로 넣는 것도 위와 똑같이 적용된다.&lt;/p&gt;

&lt;p&gt;호기심에 query param과 Body(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-www-form-urlencoded&lt;/code&gt; 형식)에 값을 모두 넣어보았다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/request-body-x-www-form-urlencoded&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestBodyUrlencodedV1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname={}, rank={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;		
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;변수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;query-param&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;x-www-form-urlencoded&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nickname&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;John&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Edward&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rank&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/paramErrorCheck.png&quot; alt=&quot;SpringArchitecture&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;(nickname)은 모두 값을 받고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;(rank)는 query parameter에서만 값을 받았다.&lt;/p&gt;

&lt;h2 id=&quot;responsebody&quot;&gt;ResponseBody&lt;/h2&gt;
&lt;p&gt;앞서 설명했던 것처럼 Class를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;로 선언하면 View가 아닌 Json으로 반환된다.&lt;br /&gt;
아래는 model에 값을 넣고 View를 반환하는 방법이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/response-view-v2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;responseViewV2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;response/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>익명</name></author><category term="Spring" /><category term="복습" /><summary type="html">스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</summary></entry></feed>